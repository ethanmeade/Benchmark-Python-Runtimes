# Python program for implementation of MergeSort
# Shamelessly stolen from Geeks for Geeks
import pyperf
 
 
def mergeSort(arr):
    #arr = [824, 571, 231, 174, 630, 848, 332, 911, 615, 741, 670, 857, 383, 583, 645, 106, 553, 247, 463, 358, 540, 245, 635, 345, 266, 956, 649, 740, 485, 328, 973, 153, 258, 88, 568, 687, 850, 748, 868, 783, 246, 172, 237, 362, 445, 624, 801, 113, 347, 473, 442, 281, 871, 49, 683, 303, 584, 643, 847, 849, 810, 244, 555, 21, 450, 401, 16, 400, 160, 370, 499, 224, 519, 881, 774, 539, 500, 376, 805, 250, 238, 763, 36, 455, 953, 622, 193, 441, 112, 412, 239, 756, 495, 632, 605, 31, 46, 777, 820, 784, 414, 6, 588, 717, 242, 219, 108, 561, 675, 120, 392, 889, 971, 713, 698, 572, 471, 627, 579, 709, 794, 589, 636, 708, 186, 348, 730, 780, 179, 959, 319, 806, 663, 23, 439, 521, 484, 534, 491, 720, 104, 827, 196, 325, 13, 267, 556, 278, 996, 117, 814, 714, 905, 535, 933, 529, 406, 883, 652, 948, 177, 461, 209, 419, 311, 138, 375, 680, 323, 638, 513, 876, 671, 295, 797, 11, 869, 880, 700, 600, 32, 721, 462, 48, 887, 338, 895, 38, 257, 761, 260, 39, 486, 37, 402, 498, 617, 712, 575, 67, 283, 835, 41, 425, 564, 812, 597, 669, 846, 533, 431, 333, 218, 704, 585, 69, 590, 56, 602, 22, 509, 938, 292, 470, 569, 697, 327, 256, 150, 543, 582, 873, 460, 719, 775, 268, 552, 130, 96, 183, 863, 459, 892, 832, 424, 921, 656, 694, 141, 19, 249, 483, 79, 884, 452, 184, 653, 72, 558, 397, 808, 626, 55, 930, 157, 421, 792, 74, 901, 230, 5, 65, 625, 603, 807, 877, 727, 336, 782, 453, 988, 125, 148, 508, 874, 841, 522, 195, 750, 185, 83, 785, 426, 384, 428, 885, 202, 944, 789, 951, 440, 542, 963, 9, 446, 290, 467, 646, 444, 313, 647, 604, 477, 235, 395, 773, 306, 465, 213, 991, 766, 432, 644, 833, 371, 732, 843, 284, 181, 593, 765, 570, 989, 417, 918, 998, 686, 815, 650, 772, 703, 252, 629, 59, 155, 536, 449, 962, 408, 493, 506, 12, 595, 331, 161, 565, 301, 487, 922, 544, 997, 287, 156, 726, 829, 875, 771, 291, 145, 192, 93, 380, 203, 2, 75, 127, 840, 972, 753, 970, 800, 140, 987, 560, 386, 928, 489, 263, 220, 831, 122, 515, 935, 354, 297, 872, 85, 867, 364, 856, 302, 318, 289, 637, 628, 378, 975, 538, 679, 34, 788, 139, 661, 60, 878, 430, 233, 541, 80, 711, 30, 437, 91, 134, 961, 586, 969, 599, 825, 307, 611, 757, 858, 458, 3, 839, 822, 50, 745, 723, 109, 7, 576, 264, 241, 490, 707, 828, 84, 842, 734, 443, 614, 17, 909, 631, 226, 557, 385, 204, 164, 111, 43, 836, 776, 225, 504, 4, 90, 317, 735, 854, 97, 497, 201, 15, 476, 87, 149, 701, 78, 168, 798, 276, 715, 790, 573, 942, 641, 688, 119, 577, 674, 642, 279, 979, 581, 296, 359, 448]
    if len(arr) > 1:
 
         # Finding the mid of the array
        mid = len(arr)//2
 
        # Dividing the array elements
        L = arr[:mid]
 
        # Into 2 halves
        R = arr[mid:]
 
        # Sorting the first half
        mergeSort(L)
 
        # Sorting the second half
        mergeSort(R)
 
        i = j = k = 0
 
        # Copy data to temp arrays L[] and R[]
        while i < len(L) and j < len(R):
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
 
        # Checking if any element was left
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
 
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
 
 
# Code to print the list
def printList(arr):
    arr_str = ""
    for i in range(len(arr)):
        arr_str += str(arr[i]) + " "
    print(arr_str)

def reset_arr():
    return [9.635415191967397, 8.474244123404445, 3.2850799173423297, 0.4006592567330258, 9.959080997092835, 0.1312783961630748, 5.325047396383774, 7.07977756890985, 3.6190619498376178, 6.316131500986987, 9.458088801239702, 7.871342278174324, 7.749156732394827, 6.413455131622367, 2.1367369457876695, 2.7450487358652085, 9.4362729941268, 9.100661323079647, 7.815176689245126, 1.9066404893321542, 1.4734156096376017, 2.350391323602329, 9.629060400279407, 2.645624578852063, 6.606780167537947, 9.208038000393227, 6.457714521446087, 9.762382700999678, 5.87343124399557, 1.3092863642967745, 7.0886125442397905, 1.958469723358267, 4.07223325070642, 2.6252877901698723, 2.886946456318028, 6.388995894985338, 3.5914364483380035, 7.818284244382988, 2.2377886356793333, 2.213152267798002, 6.563888225538987, 8.747688553260586, 1.5711047161052782, 5.044989261322064, 2.876856349619178, 9.654272474692378, 0.3229965539717372, 7.94933332101058, 9.110299198640048, 9.474569190049657, 8.659082438910756, 1.292010050563499, 4.829150412410783, 6.661194197709175, 1.2965114583723703, 0.6177278362117977, 8.251434619891334, 7.595168111336416, 5.34026524199507, 2.959341736026632, 4.158780238338315, 9.75356336970209, 6.2345898278274205, 3.9430938088384284, 7.615637028622366, 2.3251279179194437, 0.21762343290356312, 5.894226282681902, 1.1762412176486858, 0.30064372295025454, 6.649552496907985, 3.4105563506724943, 1.8822886713820586, 6.393340147032402, 7.228433473838872, 7.725021648232422, 2.091362784598765, 1.8162621245712551, 9.793053503204751, 4.347789171250087, 1.2232590211197558, 3.6817119477060603, 6.347591873545856, 8.260884938825516, 3.1168577046041546, 7.242425925469075, 5.701016622968677, 4.432258400314451, 2.804895032187127, 9.057800500657823, 5.519830347793099, 5.8162507320525405, 6.754868835354479, 8.354635479375446, 7.670240116944656, 1.7281396121488168, 6.620889526984931, 1.8518284775670413, 9.80211035365148, 5.014223860139664, 9.941922538244622, 4.956047327981042, 2.6582860472257575, 0.8867107326635326, 2.4265006140983134, 8.105393459926262, 3.9549078398979933, 8.76436023639522, 1.3222879429269996, 1.8464671070991334, 1.8372570125234944, 8.25127119785344, 9.47837337050707, 9.348617955788237, 9.521366196239661, 9.374197563768401, 9.610137938126634, 6.101055260121337, 6.22174168841023, 6.183711959572918, 5.44902141730978, 7.6819399886568585, 3.6359867444294136, 3.1152344882967533, 3.6868000117107638, 4.087819719930936, 2.885252291344674, 8.976434374410994, 1.5358903888732534, 8.67019999728231, 0.7911270684051264, 3.3216371239557696, 5.065183314514918, 5.075735701469712, 4.522868675451383, 9.72480466870132, 8.85781790331998, 3.949589166198666, 8.489654525231801, 2.7659491340506093, 6.464189594332165, 1.7094378585878978, 5.441531494861259, 7.9255173442257165, 4.158811192489068, 2.6148298169123905, 7.861978148585721, 0.6790477309130438, 1.3536613555115606, 2.1363150977807055, 3.5933259517445504, 1.518889553002184, 1.5946011018207218, 9.235627487346711, 6.274301084351017, 9.465314404553864, 7.411011919388967, 5.619628891247125, 0.8343267093397022, 8.985032703932923, 8.3572721584715, 1.6905912469975448, 4.020692487538656, 0.9804952549504142, 3.1621398345029474, 4.38919431051075, 0.8587185272197384, 7.303547520107674, 0.8907443500356271, 8.958894264186112, 6.3864827940516875, 8.775671063881592, 8.547235376525624, 4.019613374808763, 5.0850672660357885, 1.8187464715806567, 4.5979301748261046, 9.230899167961471, 5.307623937153474, 4.25184145478975, 3.6638423391346278, 0.23906273434388892, 8.177180699072071, 8.577715575457308, 9.64839311581101, 0.5642608598156118, 1.3929898133799146, 8.800254343446207, 8.05113222767601, 8.480498104873464, 2.5845283191882418, 3.3098568110584194, 2.307781276774495, 6.446938226190669, 2.0290278722257726, 3.4862250100173995, 2.209574850724465, 3.3093443579763693, 8.083735874644578, 7.313841060298676, 6.798535468293295, 0.08012724172560493, 0.5447004124096744, 6.180705342683761, 0.0167390232812914, 3.397937239875104, 0.3653752001394839, 5.375742454039213, 8.992205465619282, 4.342097002940216, 2.276857085459305, 9.96426083433262, 1.7201083087336722, 3.7837663446943526, 2.90509756493209, 3.909360075608822, 8.740656664437736, 8.259254612556468, 5.9635968562564585, 3.0955288537333203, 8.49225177118884, 0.45531055968116574, 1.4574402749397386, 3.8950395706735694, 1.9245730441014286, 9.546635282028937, 9.444245154798308, 4.392428715837278, 2.830891730944761, 9.571416009580714, 8.631166727451475, 2.339791172820984, 5.539763686503876, 9.81418895498763, 1.9768679446282045, 9.17229270003702, 7.920413528540737, 8.208514592057256, 5.375856838400389, 7.371977058787532, 2.7620731446700453, 0.02050907919135536, 3.7143399595137563, 1.583423807104184, 4.415677040698547, 3.0950619842351976, 8.879102861375332, 7.844778510964111, 2.4423499341938557, 7.531948030205631, 6.743257242850776, 6.097742025244454, 4.913431013725726, 3.6117554187132193, 1.600025724190175, 6.995914841277969, 2.005223768080712, 9.356294705615586, 0.4797194044187092, 1.0000810225825385, 8.42775663266634, 5.771579661883264, 1.757569764325081, 6.9009485343399, 6.034959491468543, 2.88814566133875, 1.2584243282016006, 9.40174009904586, 9.488865654966801, 1.4925079726389334, 4.566597102466192, 6.970940038760012, 2.486099550805261, 7.358107753518732, 9.865568240944576, 6.45048884739262, 6.958631348348245, 7.063878106155173, 5.039477315304377, 4.630594752982969, 5.22143767043792, 4.303679113396442, 3.3273196166053918, 6.3219251285079725, 2.651541465206526, 6.221074424151606, 7.732497172467231, 8.635268985425666, 9.554515612332622, 3.0908424881349337, 3.389572022605294, 4.732601171561366, 4.904392330174522, 0.21152985140379887, 7.507404875049989, 7.6874944897039565, 4.823845154737226, 8.25804290087769, 0.7800272530434427, 7.067510497647217, 2.785304921970122, 1.7750654126715648, 2.171862573676658, 6.343158390104662, 6.922936110785638, 2.626180289194253, 5.10984069095432, 5.745119040211738, 4.859847880685194, 1.546625198670577, 2.7386335135850013, 9.104853982318629, 3.3576597896871565, 5.3974888902999805, 2.245178763201663, 2.420970211494894, 7.759969228729967, 4.314369538268261, 2.3261454274580284, 9.702206780558706, 4.47129644294709, 7.328302767371648, 6.023304490411652, 6.692213988726754, 3.4310988483147966, 0.4547268228868262, 6.048058927367157, 1.891071820194108, 3.6371598911405267, 3.3480169535644455, 1.3639901791337006, 1.791528478481561, 2.3623452690258127, 5.520779884669766, 6.04741717397431, 6.721484548374925, 0.6027279676201358, 5.984366358093873, 1.563497109720302, 6.15687022917356, 5.344064676206996, 4.087810277676263, 0.8399390129607243, 2.216857563543643, 4.705940204615225, 3.9982248548770896, 7.735747570304704, 6.144761791089268, 0.6490481765610889, 0.8496667807903402, 4.29968790274671, 1.977910787062196, 8.762310565102988, 2.4545398935693488, 7.5865724886941095, 7.287051201704438, 4.031084644794721, 7.470642830335034, 4.8005592217472435, 2.5708586500658894, 9.39531415528503, 4.189251677278097, 9.977646427463046, 6.128998163831296, 1.1422541423268906, 9.4019767193053, 5.91510217388187, 5.560411432154861, 2.848672352361165, 3.8240978628797704, 0.7420130159687222, 0.7226501379763484, 8.257809729272074, 3.982979575995266, 3.9171547616638556, 0.46246286456420926, 8.69745740597896, 5.246564815931106, 0.04506944696195947, 5.764252659179865, 0.1987829293833876, 9.048608020316506, 4.50675465054882, 2.885989178787003, 4.259300656893049, 0.13590433387777656, 8.899239835643284, 8.732210842584365, 9.234691534995749, 4.079036242313359, 7.724442656925788, 1.2809438663411332, 1.5609345521464468, 0.10183981633722583, 3.6168696998633942, 0.40952838938405733, 6.450126284059092, 4.693410674354935, 1.6511575856684846, 9.886911165035384, 0.1893396081581311, 9.83185909709308, 3.418627682294344, 1.1851535831628413, 3.547985799228198, 5.29118207419444, 9.17258429656433, 4.382092088193922, 7.997131485809041, 3.3826280182914803, 2.5177060955879815, 0.09790375526222195, 0.8025582331133851, 8.641821747278982, 2.7759353577558166, 5.772042721143938, 8.442118647406744, 3.561203795619705, 0.8838921482788764, 3.2027613451983483, 6.117467759824424, 3.6590702157603583, 1.8231858215286534, 2.9429337420313306, 3.2612786229634114, 9.138976594018608, 1.0019453329533334, 4.260676957202847, 1.6451936037862303, 7.0763727132230745, 8.372843793634628, 5.828609938694375, 1.4968138233518802, 7.613964729276378, 3.7062618852492726, 3.007406164265234, 4.492733727300289, 4.333004858501309, 2.125872162469004, 8.413095299952296, 6.6017518430998905, 2.045569274047941, 8.20491885091133, 7.757274509614124, 0.29367172943165043, 8.103135435010692, 9.18871554932919, 8.85724761913033, 0.1719626723368084, 0.04257599098317577, 8.050155924255481, 4.725205792406358, 3.5238693824284772, 6.6077140596577415, 9.93889706215006, 8.399100938494637, 5.83895326177095, 8.773723986374796, 2.092807674980918, 7.408667172352725, 1.5420413419623247, 3.036111060044754, 5.851899707194485, 2.3670995723039234, 7.268995812714859, 9.794239691277836, 7.378967617159838, 6.1458270399343355, 2.0153221927698226, 8.46865762217599, 0.5084573327049458, 5.824261443663605, 2.088339818887249, 2.4805107108720117, 8.519672212211738, 7.4601147260818355, 9.401260914828924, 3.528016802248967, 4.582933228102563, 5.186592646091366, 9.820297583201572, 0.000944883696735177, 5.231521182385315, 3.0951557249429595, 3.9741062106135283, 2.481097209626336, 2.969574523834991, 1.3347310345176056, 4.587443180036414, 8.34821564493535, 1.8399972782312535, 1.5380965038130434, 3.9151717522846017, 4.942300893579189, 6.436668323450067, 2.8754719067381904, 4.634291034952863, 9.326041864023933, 0.09180519263526477, 0.9741143752810977]
 
 
# Driver Code
if __name__ == '__main__':
    arr = []
    
    runner = pyperf.Runner()
    runner.metadata['description'] = "Mergesort int benchmark"

    runner.timeit('mergesort int', stmt='mergeSort(arr)', setup=['from __main__ import mergeSort', 'from __main__ import reset_arr', 'arr = reset_arr()'])
 
# This code is contributed by Mayank Khanna