# Python program for implementation of MergeSort
# Shamelessly stolen from Geeks for Geeks
import pyperf
 
 
def mergeSort(arr):
    #arr = [824, 571, 231, 174, 630, 848, 332, 911, 615, 741, 670, 857, 383, 583, 645, 106, 553, 247, 463, 358, 540, 245, 635, 345, 266, 956, 649, 740, 485, 328, 973, 153, 258, 88, 568, 687, 850, 748, 868, 783, 246, 172, 237, 362, 445, 624, 801, 113, 347, 473, 442, 281, 871, 49, 683, 303, 584, 643, 847, 849, 810, 244, 555, 21, 450, 401, 16, 400, 160, 370, 499, 224, 519, 881, 774, 539, 500, 376, 805, 250, 238, 763, 36, 455, 953, 622, 193, 441, 112, 412, 239, 756, 495, 632, 605, 31, 46, 777, 820, 784, 414, 6, 588, 717, 242, 219, 108, 561, 675, 120, 392, 889, 971, 713, 698, 572, 471, 627, 579, 709, 794, 589, 636, 708, 186, 348, 730, 780, 179, 959, 319, 806, 663, 23, 439, 521, 484, 534, 491, 720, 104, 827, 196, 325, 13, 267, 556, 278, 996, 117, 814, 714, 905, 535, 933, 529, 406, 883, 652, 948, 177, 461, 209, 419, 311, 138, 375, 680, 323, 638, 513, 876, 671, 295, 797, 11, 869, 880, 700, 600, 32, 721, 462, 48, 887, 338, 895, 38, 257, 761, 260, 39, 486, 37, 402, 498, 617, 712, 575, 67, 283, 835, 41, 425, 564, 812, 597, 669, 846, 533, 431, 333, 218, 704, 585, 69, 590, 56, 602, 22, 509, 938, 292, 470, 569, 697, 327, 256, 150, 543, 582, 873, 460, 719, 775, 268, 552, 130, 96, 183, 863, 459, 892, 832, 424, 921, 656, 694, 141, 19, 249, 483, 79, 884, 452, 184, 653, 72, 558, 397, 808, 626, 55, 930, 157, 421, 792, 74, 901, 230, 5, 65, 625, 603, 807, 877, 727, 336, 782, 453, 988, 125, 148, 508, 874, 841, 522, 195, 750, 185, 83, 785, 426, 384, 428, 885, 202, 944, 789, 951, 440, 542, 963, 9, 446, 290, 467, 646, 444, 313, 647, 604, 477, 235, 395, 773, 306, 465, 213, 991, 766, 432, 644, 833, 371, 732, 843, 284, 181, 593, 765, 570, 989, 417, 918, 998, 686, 815, 650, 772, 703, 252, 629, 59, 155, 536, 449, 962, 408, 493, 506, 12, 595, 331, 161, 565, 301, 487, 922, 544, 997, 287, 156, 726, 829, 875, 771, 291, 145, 192, 93, 380, 203, 2, 75, 127, 840, 972, 753, 970, 800, 140, 987, 560, 386, 928, 489, 263, 220, 831, 122, 515, 935, 354, 297, 872, 85, 867, 364, 856, 302, 318, 289, 637, 628, 378, 975, 538, 679, 34, 788, 139, 661, 60, 878, 430, 233, 541, 80, 711, 30, 437, 91, 134, 961, 586, 969, 599, 825, 307, 611, 757, 858, 458, 3, 839, 822, 50, 745, 723, 109, 7, 576, 264, 241, 490, 707, 828, 84, 842, 734, 443, 614, 17, 909, 631, 226, 557, 385, 204, 164, 111, 43, 836, 776, 225, 504, 4, 90, 317, 735, 854, 97, 497, 201, 15, 476, 87, 149, 701, 78, 168, 798, 276, 715, 790, 573, 942, 641, 688, 119, 577, 674, 642, 279, 979, 581, 296, 359, 448]
    if len(arr) > 1:
 
         # Finding the mid of the array
        mid = len(arr)//2
 
        # Dividing the array elements
        L = arr[:mid]
 
        # Into 2 halves
        R = arr[mid:]
 
        # Sorting the first half
        mergeSort(L)
 
        # Sorting the second half
        mergeSort(R)
 
        i = j = k = 0
 
        # Copy data to temp arrays L[] and R[]
        while i < len(L) and j < len(R):
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
 
        # Checking if any element was left
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
 
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
 
 
# Code to print the list
def printList(arr):
    arr_str = ""
    for i in range(len(arr)):
        arr_str += str(arr[i]) + " "
    print(arr_str)

def reset_arr():
    return [824, 571, 231, 174, 630, 848, 332, 911, 615, 741, 670, 857, 383, 583, 645, 106, 553, 247, 463, 358, 540, 245, 635, 345, 266, 956, 649, 740, 485, 328, 973, 153, 258, 88, 568, 687, 850, 748, 868, 783, 246, 172, 237, 362, 445, 624, 801, 113, 347, 473, 442, 281, 871, 49, 683, 303, 584, 643, 847, 849, 810, 244, 555, 21, 450, 401, 16, 400, 160, 370, 499, 224, 519, 881, 774, 539, 500, 376, 805, 250, 238, 763, 36, 455, 953, 622, 193, 441, 112, 412, 239, 756, 495, 632, 605, 31, 46, 777, 820, 784, 414, 6, 588, 717, 242, 219, 108, 561, 675, 120, 392, 889, 971, 713, 698, 572, 471, 627, 579, 709, 794, 589, 636, 708, 186, 348, 730, 780, 179, 959, 319, 806, 663, 23, 439, 521, 484, 534, 491, 720, 104, 827, 196, 325, 13, 267, 556, 278, 996, 117, 814, 714, 905, 535, 933, 529, 406, 883, 652, 948, 177, 461, 209, 419, 311, 138, 375, 680, 323, 638, 513, 876, 671, 295, 797, 11, 869, 880, 700, 600, 32, 721, 462, 48, 887, 338, 895, 38, 257, 761, 260, 39, 486, 37, 402, 498, 617, 712, 575, 67, 283, 835, 41, 425, 564, 812, 597, 669, 846, 533, 431, 333, 218, 704, 585, 69, 590, 56, 602, 22, 509, 938, 292, 470, 569, 697, 327, 256, 150, 543, 582, 873, 460, 719, 775, 268, 552, 130, 96, 183, 863, 459, 892, 832, 424, 921, 656, 694, 141, 19, 249, 483, 79, 884, 452, 184, 653, 72, 558, 397, 808, 626, 55, 930, 157, 421, 792, 74, 901, 230, 5, 65, 625, 603, 807, 877, 727, 336, 782, 453, 988, 125, 148, 508, 874, 841, 522, 195, 750, 185, 83, 785, 426, 384, 428, 885, 202, 944, 789, 951, 440, 542, 963, 9, 446, 290, 467, 646, 444, 313, 647, 604, 477, 235, 395, 773, 306, 465, 213, 991, 766, 432, 644, 833, 371, 732, 843, 284, 181, 593, 765, 570, 989, 417, 918, 998, 686, 815, 650, 772, 703, 252, 629, 59, 155, 536, 449, 962, 408, 493, 506, 12, 595, 331, 161, 565, 301, 487, 922, 544, 997, 287, 156, 726, 829, 875, 771, 291, 145, 192, 93, 380, 203, 2, 75, 127, 840, 972, 753, 970, 800, 140, 987, 560, 386, 928, 489, 263, 220, 831, 122, 515, 935, 354, 297, 872, 85, 867, 364, 856, 302, 318, 289, 637, 628, 378, 975, 538, 679, 34, 788, 139, 661, 60, 878, 430, 233, 541, 80, 711, 30, 437, 91, 134, 961, 586, 969, 599, 825, 307, 611, 757, 858, 458, 3, 839, 822, 50, 745, 723, 109, 7, 576, 264, 241, 490, 707, 828, 84, 842, 734, 443, 614, 17, 909, 631, 226, 557, 385, 204, 164, 111, 43, 836, 776, 225, 504, 4, 90, 317, 735, 854, 97, 497, 201, 15, 476, 87, 149, 701, 78, 168, 798, 276, 715, 790, 573, 942, 641, 688, 119, 577, 674, 642, 279, 979, 581, 296, 359, 448]
 
 
# Driver Code
if __name__ == '__main__':
    arr = []
    
    runner = pyperf.Runner()
    runner.metadata['description'] = "Mergesort int benchmark"

    runner.timeit('mergesort int', stmt='mergeSort(arr)', setup=['from __main__ import mergeSort', 'arr = [824, 571, 231, 174, 630, 848, 332, 911, 615, 741, 670, 857, 383, 583, 645, 106, 553, 247, 463, 358, 540, 245, 635, 345, 266, 956, 649, 740, 485, 328, 973, 153, 258, 88, 568, 687, 850, 748, 868, 783, 246, 172, 237, 362, 445, 624, 801, 113, 347, 473, 442, 281, 871, 49, 683, 303, 584, 643, 847, 849, 810, 244, 555, 21, 450, 401, 16, 400, 160, 370, 499, 224, 519, 881, 774, 539, 500, 376, 805, 250, 238, 763, 36, 455, 953, 622, 193, 441, 112, 412, 239, 756, 495, 632, 605, 31, 46, 777, 820, 784, 414, 6, 588, 717, 242, 219, 108, 561, 675, 120, 392, 889, 971, 713, 698, 572, 471, 627, 579, 709, 794, 589, 636, 708, 186, 348, 730, 780, 179, 959, 319, 806, 663, 23, 439, 521, 484, 534, 491, 720, 104, 827, 196, 325, 13, 267, 556, 278, 996, 117, 814, 714, 905, 535, 933, 529, 406, 883, 652, 948, 177, 461, 209, 419, 311, 138, 375, 680, 323, 638, 513, 876, 671, 295, 797, 11, 869, 880, 700, 600, 32, 721, 462, 48, 887, 338, 895, 38, 257, 761, 260, 39, 486, 37, 402, 498, 617, 712, 575, 67, 283, 835, 41, 425, 564, 812, 597, 669, 846, 533, 431, 333, 218, 704, 585, 69, 590, 56, 602, 22, 509, 938, 292, 470, 569, 697, 327, 256, 150, 543, 582, 873, 460, 719, 775, 268, 552, 130, 96, 183, 863, 459, 892, 832, 424, 921, 656, 694, 141, 19, 249, 483, 79, 884, 452, 184, 653, 72, 558, 397, 808, 626, 55, 930, 157, 421, 792, 74, 901, 230, 5, 65, 625, 603, 807, 877, 727, 336, 782, 453, 988, 125, 148, 508, 874, 841, 522, 195, 750, 185, 83, 785, 426, 384, 428, 885, 202, 944, 789, 951, 440, 542, 963, 9, 446, 290, 467, 646, 444, 313, 647, 604, 477, 235, 395, 773, 306, 465, 213, 991, 766, 432, 644, 833, 371, 732, 843, 284, 181, 593, 765, 570, 989, 417, 918, 998, 686, 815, 650, 772, 703, 252, 629, 59, 155, 536, 449, 962, 408, 493, 506, 12, 595, 331, 161, 565, 301, 487, 922, 544, 997, 287, 156, 726, 829, 875, 771, 291, 145, 192, 93, 380, 203, 2, 75, 127, 840, 972, 753, 970, 800, 140, 987, 560, 386, 928, 489, 263, 220, 831, 122, 515, 935, 354, 297, 872, 85, 867, 364, 856, 302, 318, 289, 637, 628, 378, 975, 538, 679, 34, 788, 139, 661, 60, 878, 430, 233, 541, 80, 711, 30, 437, 91, 134, 961, 586, 969, 599, 825, 307, 611, 757, 858, 458, 3, 839, 822, 50, 745, 723, 109, 7, 576, 264, 241, 490, 707, 828, 84, 842, 734, 443, 614, 17, 909, 631, 226, 557, 385, 204, 164, 111, 43, 836, 776, 225, 504, 4, 90, 317, 735, 854, 97, 497, 201, 15, 476, 87, 149, 701, 78, 168, 798, 276, 715, 790, 573, 942, 641, 688, 119, 577, 674, 642, 279, 979, 581, 296, 359, 448]'])
 
# This code is contributed by Mayank Khanna